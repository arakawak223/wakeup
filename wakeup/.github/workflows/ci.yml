name: 🚀 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 基本テスト・品質チェック
  test-and-quality:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 🔍 Run ESLint
      run: npm run lint

    - name: 🎯 Run type check
      run: npm run type-check

    - name: 🧪 Run tests
      run: npm run test
      env:
        CI: true

    - name: 📊 Run test coverage
      run: npm run test:coverage
      continue-on-error: true

    - name: 🔐 Security audit
      run: npm audit --audit-level moderate

  # セキュリティスキャン
  security-scan:
    name: 🔐 Security Scan
    runs-on: ubuntu-latest
    needs: test-and-quality

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: typescript, javascript

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: 🛡️ Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Dockerイメージビルド
  build-image:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-and-quality, security-scan]

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔨 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # パフォーマンステスト
  performance-test:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 🚀 Start test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30

    - name: 🏃 Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: 📊 Run load tests
      run: |
        npx artillery run tests/load/basic-load-test.yml
      continue-on-error: true

    - name: 🛑 Stop test environment
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # E2Eテスト
  e2e-test:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'push'

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 📥 Install Playwright browsers
      run: npx playwright install --with-deps

    - name: 🚀 Start test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 45

    - name: 🎭 Run E2E tests
      run: npm run test:e2e
      env:
        PLAYWRIGHT_BASE_URL: http://localhost:3000

    - name: 📤 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: 🛑 Stop test environment
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # 本番デプロイ準備確認
  deployment-readiness:
    name: 🎯 Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test-and-quality, security-scan, build-image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔍 Validate production config
      run: |
        echo "✅ Checking production configuration..."
        test -f docker-compose.prod.yml
        test -f nginx/nginx.prod.conf
        test -f .env.production
        echo "📋 Production files validated"

    - name: 🔐 Run security tests
      run: |
        echo "🔍 Running security validation..."
        node scripts/security-test.js --dry-run || true
        echo "🛡️ Security tests completed"

    - name: 📊 Generate deployment report
      run: |
        echo "📊 Deployment Report" > deployment-report.md
        echo "===================" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "🔗 **Image**: ${{ needs.build-image.outputs.image-tag }}" >> deployment-report.md
        echo "🔐 **Digest**: ${{ needs.build-image.outputs.image-digest }}" >> deployment-report.md
        echo "📅 **Build Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-report.md
        echo "🏷️ **Commit**: ${{ github.sha }}" >> deployment-report.md
        echo "" >> deployment-report.md
        echo "### ✅ Ready for Production Deployment" >> deployment-report.md

    - name: 📤 Upload deployment report
      uses: actions/upload-artifact@v4
      with:
        name: deployment-report
        path: deployment-report.md

  # 通知
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test-and-quality, security-scan, build-image, performance-test, e2e-test]
    if: always()

    steps:
    - name: 📤 Notify success
      if: needs.test-and-quality.result == 'success' && needs.security-scan.result == 'success' && needs.build-image.result == 'success'
      run: |
        echo "🎉 CI Pipeline completed successfully!"
        echo "✅ All tests passed"
        echo "🔐 Security scans clean"
        echo "🐳 Docker image built and pushed"

    - name: 🚨 Notify failure
      if: needs.test-and-quality.result == 'failure' || needs.security-scan.result == 'failure' || needs.build-image.result == 'failure'
      run: |
        echo "❌ CI Pipeline failed!"
        echo "Tests: ${{ needs.test-and-quality.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Build: ${{ needs.build-image.result }}"
        exit 1